import Head from 'next/head';
import React from 'react';

import Header from './Header';
import { useAppDispatch } from '../../redux/hooks/hooks';
import { onAuthStateChanged } from 'firebase/auth';
import { setProfile } from '../../redux/slices/account.slice';
import { fAuth, fStore } from '../../firebase/init.firebase';
import { setIsLogin } from '../../redux/slices/auth.slice';
import { collection, query, where, getDocs, doc, getDoc, onSnapshot } from 'firebase/firestore';
import { setFeeds } from '../../redux/slices/feeds.slice';
import { IVideo, IVideoItem } from '../../interfaces/video.interface';

const Layout = ({ children, title, details }: { children: React.ReactNode; title: string; details?: boolean }) => {
  const dispatch = useAppDispatch();

  React.useEffect(() => {
    onAuthStateChanged(fAuth, (user) => {
      if (user) {
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        const uid = user.uid;
        dispatch(setIsLogin(true));

        const getProfileFromFirebase = async () => {
          try {
            onSnapshot(doc(fStore, 'users', uid), (doc) => {
              dispatch(
                setProfile({
                  profile: doc.data() as any,
                }),
              );
            });
          } catch (error) {
            console.log(error);
          }
        };

        getProfileFromFirebase();
      } else {
        // User is signed out
        dispatch(setIsLogin(false));
      }
    });
  }, []);

  React.useEffect(() => {
    const getVideos = async () => {
      try {
        const q = query(collection(fStore, 'videos'));
        onSnapshot(q, (querySnapshot) => {
          const data: Array<IVideoItem> = [];
          querySnapshot.forEach((doc) => {
            data.push(doc.data() as IVideoItem);
          });
          dispatch(setFeeds({ videos: data }));
        });
      } catch (error) {
        console.log(error);
      }
    };
    getVideos();
  }, []);

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta
          property="og:image"
          content={`https://og-image.vercel.app/${encodeURI(
            title,
          )}.png?theme=light&md=0&fontSize=75px&images=https%3A%2F%2Fassets.zeit.co%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg`}
        />
        <meta name="og:title" content={title} />
        <meta name="twitter:card" content="summary_large_image" />
        <link rel="icon" href="/favicon.ico" />
        <title>{title}</title>
      </Head>
      {!details && <Header />}
      <main>{children}</main>
    </>
  );
};

export default Layout;
